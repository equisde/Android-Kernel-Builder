name: "Construir Kernels"

env:
  CONFIGURACION: "config/configuracion.json"
  CARPETA_SALIDA: "out"

on:
  workflow_dispatch:

jobs:
  Configurar-repos:
    name: "üêÇ Analizar configuracion.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generar-matriz.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generar Matriz"
        id: generar-matriz
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGURACION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Construir-Kernel:
    name: "üêé Construir kernel"
    runs-on: ubuntu-latest
    needs:
      - Configurar-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Configurar-repos.outputs.repos) }}
    env:
      dirKernel: ${{ matrix.repos.kernelSource.nombre }}_${{ matrix.repos.kernelSource.dispositivo }}
      USAR_CCACHE: ${{ matrix.repos.enableCcache }}
      USAR_ANYKERNEL3: ${{ matrix.repos.AnyKernel3.use }}
      CONFIRMAR_LANZAMIENTO: ${{ matrix.repos.AnyKernel3.release }}
      nombreKernel: ${{ matrix.repos.kernelSource.nombre }}
      repoKernel: ${{ matrix.repos.kernelSource.repo }}
      ramaKernel: ${{ matrix.repos.kernelSource.rama }}
      dispositivoKernel: ${{ matrix.repos.kernelSource.dispositivo }}
      ARQUITECTURA: ${{ matrix.repos.params.ARCH }}
      NOMBRE_DEFCONFIG: sweet_nethunter_defconfig
      conKernelSU: ${{ matrix.repos.withKernelSU }}
      DIR_CCACHE: "${{ github.workspace }}/ccache"

    steps:
      - name: "‚ú® Crear directorio de trabajo"
        run: mkdir -p $dirKernel

      - name: "‚≠ê Instalar requisitos"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools
          sudo apt-get install -y curl git ftp lftp wget libarchive-tools ccache python2 python2-dev python3
          sudo apt-get install -y pngcrush schedtool dpkg-dev liblz4-tool make optipng maven device-tree-compiler 
          sudo apt-get install -y libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc
          sudo apt-get install -y libxml2-utils libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools lzop flex tree
          sudo apt-get install -y build-essential bc gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev libfl-dev
          sudo apt-get install -y pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl 
          sudo apt-get install -y zip unzip tar gzip bzip2 rar unrar llvm g++-multilib bison gperf zlib1g-dev automake

      - name: üöÑ Configurar ccache
        if: ${{ env.USAR_CCACHE == 'true' }}
        id: hash
        run: |
          mkdir -p ${{ env.CARPETA_SALIDA }}
          ccache -o compression=false -o cache_dir=${{ env.DIR_CCACHE }}
          echo $(echo -n '${{ toJSON(matrix.repos) }}' | openssl dgst -sha1 | awk '{print $2}')
          echo "HASH=$(echo -n '${{ toJSON(matrix.repos) }}' | openssl dgst -sha1 | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: üöÖ Cache de ccache y salida
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        if: ${{ env.USAR_CCACHE == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARPETA_SALIDA }}
            ${{ env.DIR_CCACHE }}
          key: cache-${{ env.nombreKernel }}-${{ env.HASH }}-2023"
          restore-keys: |
            cache-${{ env.nombreKernel }}-${{ env.HASH }}-2023"
            cache-${{ env.nombreKernel }}-${{ env.HASH }}-
            cache-${{ env.nombreKernel }}-

      - name: "üåü Clonar fuente del kernel => (${{ env.repoKernel }})"
        working-directory: ./${{ env.dirKernel }}
        run: |
          git clone --recursive --branch $ramaKernel $repoKernel $nombreKernel --depth=1

      - name: "üí´ Obtener herramientas de compilaci√≥n"
        working-directory: ./${{ env.dirKernel }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo $toolchains_num
          for ((i=0;i<toolchains_num;i++)); do
            name=$(echo $toolchains | jq -r ".[$i].nombre")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            rama=$(echo $toolchains | jq -r ".[$i].rama")
            git clone --recursive --branch $rama $repo $name --depth=1
            echo "$(pwd)/$name/" >> $GITHUB_PATH
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done

          echo "Variable de RUTA: $PATH"

      - name: "üòé Establecer argumentos"
        id: generar-args
        working-directory: ./${{ env.dirKernel }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
          THREAD: $(nproc --all)
          
        run: |
          echo "Variable de RUTA: $PATH"
          ARQUITECTURA="arm64"
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")

          echo "ARQUITECTURA=$ARQUITECTURA" >> $GITHUB_ENV

          args="-j$(nproc --all)"
          if [ -n "${{ env.CARPETA_SALIDA }}" ]; then
            mkdir -p $(pwd)/${{ env.CARPETA_SALIDA }}
            args="$args O=$(pwd)/${{ env.CARPETA_SALIDA }}"
          fi
          if [ -n "$ARQUITECTURA" ]; then
            args="$args ARQUITECTURA=$ARQUITECTURA"
          fi
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$CROSS_COMPILE_COMPAT" ]; then
            args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üòã Actualizar KernelSU"
        working-directory: ./${{ env.dirKernel }}/${{ env.nombreKernel }}
        if: ${{ env.conKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

          echo -e "\nCONFIG_KPROBES=y" >> ./arch/${{ env.ARQUITECTURA }}/configs/${{ env.NOMBRE_DEFCONFIG }}
          echo -e "\nCONFIG_HAVE_KPROBES=y" >> ./arch/${{ env.ARQUITECTURA }}/configs/${{ env.NOMBRE_DEFCONFIG }}
          echo -e "\nCONFIG_KPROBE_EVENTS=y" >> ./arch/${{ env.ARQUITECTURA }}/configs/${{ env.NOMBRE_DEFCONFIG }}

          cat ./arch/${{ env.ARQUITECTURA }}/configs/${{ env.NOMBRE_DEFCONFIG }}

      - name: "üëç Crear configuraci√≥n por defecto"
        working-directory: ./${{ env.dirKernel }}/${{ env.nombreKernel }}
        env:
          args: ${{ steps.generar-args.outputs.args }}
        run: |
          echo "Variable de RUTA: $PATH"
          make ${{ env.args }} ${{ env.NOMBRE_DEFCONFIG }}

      - name: "üé∂ Compilar kernel"
        working-directory: ./${{ env.dirKernel }}/${{ env.nombreKernel }}
        env:
          args: ${{ steps.generar-args.outputs.args }}
        run: |
          echo "Variable de RUTA: $PATH"
          make ${args}

      - name: "üíõ Subir imagen"
        uses: actions/upload-artifact@v3
        with:
          name: Imagen(${{ env.dispositivoKernel }}-${{ env.nombreKernel }}-${{ env.ramaKernel }})
          path: ./${{ env.dirKernel }}/${{ env.CARPETA_SALIDA }}/arch/${{ env.ARQUITECTURA }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíô Subir Image.gz"
        uses: actions/upload-artifact@v3
        with:
          name: Image.gz(${{ env.dispositivoKernel }}-${{ env.nombreKernel }}-${{ env.ramaKernel }})
          path: ./${{ env.dirKernel }}/${{ env.CARPETA_SALIDA }}/arch/${{ env.ARQUITECTURA }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíú Subir dtb"
        uses: actions/upload-artifact@v3
        with:
          name: dtb(${{ env.dispositivoKernel }}-${{ env.nombreKernel }}-${{ env.ramaKernel }})
          path: ./${{ env.dirKernel }}/${{ env.CARPETA_SALIDA }}/arch/${{ env.ARQUITECTURA }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Subir dtbo.img"
        uses: actions/upload-artifact@v3
        with:
          name: dtbo.img(${{ env.dispositivoKernel }}-${{ env.nombreKernel }}-${{ env.ramaKernel }})
          path: ./${{ env.dirKernel }}/${{ env.CARPETA_SALIDA }}/arch/${{ env.ARQUITECTURA }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7
          
      - name: ‚è∞ Empaquetar Anykernel3
        if: ${{ env.USAR_ANYKERNEL3 == 'true' }}
        env:
          PARAMS: "${{ toJSON(matrix.repos.AnyKernel3) }}"
          ARQUITECTURA: ${{ steps.generar-args.outputs.ARQUITECTURA }}
          ANYKERNEL3_FILE: "./${{ env.dirKernel }}/${{ env.nombreKernel }}/AnyKernel3-${{ env.nombreKernel }}-2023"
        run: |
          if echo -n '${{ env.PARAMS }}' | jq -e 'has("custom")' > /dev/null; then
            CUSTOM_ANYKERNEL3=$(echo -n '${{ env.PARAMS }}' | jq -r ".custom")
            ANYKERNEL_REPO=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".repo")
            ANYKERNEL_BRANCH=$(echo $CUSTOM_ANYKERNEL3 | jq -r ".rama")
            git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3
            echo "ü§î Usar AnyKernel3 personalizado => ($ANYKERNEL_REPO)"
          else
            git clone --recursive --depth=1 -j $(nproc) https://github.com/osm0sis/AnyKernel3 AnyKernel3
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
            sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
            sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
            echo "ü§î Usar AnyKernel3 original => (https://github.com/osm0sis/AnyKernel3)"
          fi

          cp -f ${{ env.CARPETA_SALIDA }}/arch/${{ env.ARQUITECTURA }}/boot/Image.gz-dtb AnyKernel3/
          cd AnyKernel3

          if echo -n '${{ env.PARAMS }}' | jq -e 'has("archivosAdicionales")' > /dev/null; then
            archivosAdicionales=$(echo -n '${{ env.PARAMS }}' | jq -r ".archivosAdicionales[]")
            for archivo in $archivosAdicionales; do
              if [ -e "$archivo" ]; then
                cp -f $archivo .
              else
                echo "‚ö†Ô∏è Advertencia: El archivo $archivo no existe y no se incluir√° en el paquete AnyKernel3."
              fi
            done
          fi

          zip -r9 $ANYKERNEL3_FILE *
          cd ..

      - name: üöÄ Lanzar confirmaci√≥n de lanzamiento
        if: ${{ env.CONFIRMAR_LANZAMIENTO == 'true' }}
        run: |
          echo "Variable de RUTA: $PATH"
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout ${{ env.ramaKernel }}
          git add .
          git commit -m "Construcci√≥n autom√°tica de kernel para ${{ env.nombreKernel }} (${{ env.dispositivoKernel }}) - Confirmar lanzamiento"
          git push origin ${{ env.ramaKernel }}

      - name: üßπ Limpiar directorio de trabajo
        run: rm -rf ./${{ env.dirKernel }}

      - name: üö´ Desactivar AnyKernel3 si se us√≥
        if: ${{ env.USAR_ANYKERNEL3 == 'true' }}
        run: rm -rf ./AnyKernel3

      - name: ü§ñ Fin del trabajo
        run: echo "¬°Trabajo finalizado exitosamente!"
